<doctype html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Chess@home</title>
    <script src="/browserify.js"></script>
    <script>
    window.onload = function () {
      var EventEmitter = require('events').EventEmitter
        , dnode = require('dnode')
        , emitter = new EventEmitter
        , worker = new Worker('/engine.js');

      if (!window.console) {
        console.log = {};
      }

      // Cookie functions from PPK
      function createCookie(name, value, days) {
        var expires = '';
        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
          expires = '; expires=' + date.toGMTString();
        }
        document.cookie = name + '=' + value + expires + '; path=/';
      };

      function readCookie(name) {
        var nameEQ = name + '=';
        var ca = document.cookie.split(';');
        for (var i = 0 ; i < ca.length ; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1, c.length)
          };
          if (c.indexOf(nameEQ) == 0) {
            return c.substring(nameEQ.length, c.length)
          };
        }
        return undefined;
      };

      var client = dnode(function() {
        var self = this;

        self.role = 'worker';

        worker.onmessage = function(e) {
          emitter.emit('result', e.data);
        };

        worker.error = function (e) {
          throw new('Error from worker' + e.message);
        };

        self.name = 'Worker Browser';

        this.compute = function (fen, timeout) {
          console.log('[' + self.name + '][' + (new Date()) +'] Starting to work on ' + fen);
          worker.postMessage({type: 'position', data: fen});
          worker.postMessage({type: 'search', data: timeout});
        };

        this.terminate = function() {
          emitter.emit('terminate');
        };
      });

      function startWorker() {
        client.connect({host: 'localhost', port: 3000, reconnect: 100, timeout: 30000}, function(remote, conn) {
          // function reconnect() {
          //   console.log('Calling reconnect()');
          //   conn.reconnect(1000, function (err) {
          //     if (err) {
          //       console.error(err);
          //       reconnect();
          //     } else {
          //       console.warn('loopsiloppsiloo');
          //     }
          //   });
          // }

          conn.on('ready', function () {
            console.log('Connected, waiting for jobs.');
          });

          conn.on('timeout', function () {
            console.log('Timeout with the server.');
            // reconnect();
          });

          conn.on('end', function () {
            console.log('Server probably crashed.');
            // reconnect();
          });

          emitter.on('result', function(data) {
            remote.processResult(data);
          });

          emitter.on('terminate', function() {
            console.log('Force terminate of client.');
            conn.end();
          });
        });
      };

      document.getElementsByTagName('div')[0].onclick = function(event) {
        window.open('/', 'Chess@home');
      };

      document.getElementsByTagName('input')[0].onclick = function(event) {
        event.stopPropagation();
      };

      document.getElementsByTagName('input')[0].onchange = function(event) {
        if (document.getElementsByTagName('input')[0].checked) {
          startWorker();
        } else {
          emitter.emit('terminate');
        }

        createCookie('chessathome_worker', document.getElementsByTagName('input')[0].checked);
      };

      var shouldRun = readCookie('chessathome_worker');

      if (shouldRun !== 'false' && shouldRun !== 'true') {
        document.getElementsByTagName('input')[0].checked = true;
        startWorker();
        createCookie('chessathome_worker', true);
      } else if (shouldRun === 'true') {
        document.getElementsByTagName('input')[0].checked = true;
        startWorker();
      }
    };
    </script>
    <style>
      html, body {
        margin: 0;
        padding: 0;
      }
      div {
        height: 26px;
        width: 120px;
        background: url('/img/iframe.png');
        overflow: hidden;
      }
      div input {
        float: right;
        margin-right: 10px;
        margin-top: 8px;
      }
    </style>
  </head>
  <body>
    <div><input type="checkbox" title="(De)activate computing"></div>
  </body>
</html>